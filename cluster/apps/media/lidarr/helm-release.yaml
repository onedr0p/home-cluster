---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: lidarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: lidarr
      version: 8.3.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/k8s-at-home/lidarr
      tag: v0.8.1.2127
    env:
      TZ: "America/New_York"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "external"
        nginx.ingress.kubernetes.io/auth-url: "https://auth.${SECRET_CLUSTER_DOMAIN}/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_CLUSTER_DOMAIN}/oauth2/start"
        # Custom themes provided by https://github.com/gilbN/theme.park
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_set_header Accept-Encoding "";
          sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://gilbn.github.io/theme.park/CSS/themes/lidarr/organizr-dark.css"></head>';
          sub_filter_once on;
        forecastle.stakater.com/expose: "true"
        forecastle.stakater.com/icon: "https://github.com/lidarr/Lidarr/blob/develop/Logo/128.png?raw=true"
        forecastle.stakater.com/network-restricted: "true"
      hosts:
      - host: "lidarr.${SECRET_CLUSTER_DOMAIN}"
        paths:
        - path: /
          pathType: Prefix
      tls:
      - hosts:
        - "lidarr.${SECRET_CLUSTER_DOMAIN}"
      additionalIngresses:
      - enabled: true
        nameSuffix: "api"
        annotations:
          kubernetes.io/ingress.class: "external"
        hosts:
        - host: "lidarr.${SECRET_CLUSTER_DOMAIN}"
          paths:
          - path: /api
            pathType: Prefix
        tls:
        - hosts:
          - "lidarr.${SECRET_CLUSTER_DOMAIN}"
    persistence:
      config:
        enabled: true
        existingClaim: lidarr-config-v1
    podSecurityContext:
      supplementalGroups:
      - 100
    additionalVolumeMounts:
    - name: media-rocinante
      mountPath: "/media-rocinante"
    - name: media-serenity
      mountPath: "/media-serenity"
    additionalVolumes:
    - name: media-rocinante
      persistentVolumeClaim:
        claimName: nfs-media-rocinante-pvc
    - name: media-serenity
      persistentVolumeClaim:
        claimName: nfs-media-serenity-pvc
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 1500Mi
    prometheus:
      podMonitor:
        enabled: true
        interval: 3m
        scrapeTimeout: 1m30s
    additionalContainers:
    - name: exportarr
      image: ghcr.io/onedr0p/exportarr:v0.6.0
      imagePullPolicy: IfNotPresent
      args: ["exportarr", "lidarr"]
      env:
      - name: PORT
        value: "32123"
      - name: URL
        value: "http://localhost"
      - name: CONFIG
        value: "/config/config.xml"
      - name: ENABLE_UNKNOWN_QUEUE_ITEMS
        value: "true"
      - name: ENABLE_ADDITIONAL_METRICS
        value: "true"
      ports:
      - name: exportarr
        containerPort: 32123
      volumeMounts:
      - name: config
        mountPath: /config
        readOnly: true
